{"ast":null,"code":"import { Subject, of, Observable, ReplaySubject, never, empty } from 'rxjs';\nimport { filter, tap, take, mergeMap, map, catchError, switchMap, startWith, sampleTime, share } from 'rxjs/operators';\nimport { isPlatformServer } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, PLATFORM_ID, Directive, Inject, Input, Output, NgModule } from '@angular/core';\n\nfunction getNavigator() {\n  return typeof window !== 'undefined' ? window.navigator : undefined;\n}\n\nfunction isChildOfPicture(element) {\n  return Boolean(element.parentElement && element.parentElement.nodeName.toLowerCase() === 'picture');\n}\n\nfunction isImageElement(element) {\n  return element.nodeName.toLowerCase() === 'img';\n}\n\nfunction setImage(element, imagePath, useSrcset) {\n  if (isImageElement(element)) {\n    if (useSrcset && 'srcset' in element) {\n      element.srcset = imagePath;\n    } else {\n      element.src = imagePath;\n    }\n  } else {\n    element.style.backgroundImage = `url('${imagePath}')`;\n  }\n\n  return element;\n}\n\nfunction setSources(attrName) {\n  return image => {\n    const sources = image.parentElement.getElementsByTagName('source');\n\n    for (let i = 0; i < sources.length; i++) {\n      const attrValue = sources[i].getAttribute(attrName);\n\n      if (attrValue) {\n        // Check if `srcset` is supported by the current browser\n        if ('srcset' in sources[i]) {\n          sources[i].srcset = attrValue;\n        } else {\n          sources[i].src = attrValue;\n        }\n      }\n    }\n  };\n}\n\nconst setSourcesToDefault = setSources('defaultImage');\nconst setSourcesToLazy = setSources('lazyLoad');\nconst setSourcesToError = setSources('errorImage');\n\nfunction setImageAndSources(setSourcesFn) {\n  return (element, imagePath, useSrcset) => {\n    if (isImageElement(element) && isChildOfPicture(element)) {\n      setSourcesFn(element);\n    }\n\n    if (imagePath) {\n      setImage(element, imagePath, useSrcset);\n    }\n  };\n}\n\nconst setImageAndSourcesToDefault = setImageAndSources(setSourcesToDefault);\nconst setImageAndSourcesToLazy = setImageAndSources(setSourcesToLazy);\nconst setImageAndSourcesToError = setImageAndSources(setSourcesToError);\n\nclass Hooks {\n  constructor() {\n    this.navigator = getNavigator();\n  }\n\n  setPlatformId(platformId) {\n    this.platformId = platformId;\n  }\n\n  onDestroy(attributes) {}\n\n  onAttributeChange(newAttributes) {}\n\n}\n\nconst cssClassNames = {\n  loaded: 'ng-lazyloaded',\n  loading: 'ng-lazyloading',\n  failed: 'ng-failed-lazyloaded'\n};\n\nfunction removeCssClassName(element, cssClassName) {\n  element.className = element.className.replace(cssClassName, '');\n}\n\nfunction addCssClassName(element, cssClassName) {\n  if (!element.className.includes(cssClassName)) {\n    element.className += ` ${cssClassName}`;\n  }\n}\n\nfunction hasCssClassName(element, cssClassName) {\n  return element.className && element.className.includes(cssClassName);\n}\n\nclass SharedHooks extends Hooks {\n  setup(attributes) {\n    setImageAndSourcesToDefault(attributes.element, attributes.defaultImagePath, attributes.useSrcset);\n\n    if (attributes.imagePath) {\n      addCssClassName(attributes.element, cssClassNames.loading);\n    }\n\n    if (hasCssClassName(attributes.element, cssClassNames.loaded)) {\n      removeCssClassName(attributes.element, cssClassNames.loaded);\n    }\n  }\n\n  finally(attributes) {\n    addCssClassName(attributes.element, cssClassNames.loaded);\n    removeCssClassName(attributes.element, cssClassNames.loading);\n  }\n\n  loadImage(attributes) {\n    if (this.skipLazyLoading(attributes)) {\n      // Set the image right away for bots for better SEO\n      return [attributes.imagePath];\n    }\n\n    const {\n      element,\n      useSrcset,\n      imagePath,\n      decode\n    } = attributes;\n    let img;\n\n    if (isImageElement(element) && isChildOfPicture(element)) {\n      const parentClone = element.parentNode.cloneNode(true);\n      img = parentClone.getElementsByTagName('img')[0];\n      setSourcesToLazy(img);\n      setImage(img, imagePath, useSrcset);\n    } else {\n      img = new Image();\n\n      if (isImageElement(element) && element.referrerPolicy) {\n        img.referrerPolicy = element.referrerPolicy;\n      }\n\n      if (isImageElement(element) && element.sizes) {\n        img.sizes = element.sizes;\n      }\n\n      if (useSrcset && 'srcset' in img) {\n        img.srcset = imagePath;\n      } else {\n        img.src = imagePath;\n      }\n    }\n\n    if (decode && img.decode) {\n      return img.decode().then(() => imagePath);\n    }\n\n    return new Promise((resolve, reject) => {\n      img.onload = () => resolve(imagePath);\n\n      img.onerror = () => reject(null);\n    });\n  }\n\n  setErrorImage(error, attributes) {\n    const {\n      element,\n      useSrcset,\n      errorImagePath\n    } = attributes;\n    setImageAndSourcesToError(element, errorImagePath, useSrcset);\n    addCssClassName(element, cssClassNames.failed);\n  }\n\n  setLoadedImage(imagePath, attributes) {\n    const {\n      element,\n      useSrcset\n    } = attributes;\n    setImageAndSourcesToLazy(element, imagePath, useSrcset);\n  }\n\n  isDisabled() {\n    // Disable if SSR and the user isn't a bot\n    return isPlatformServer(this.platformId) && !this.isBot();\n  }\n\n  skipLazyLoading(attributes) {\n    return this.isBot(attributes);\n  }\n\n  isBot(attributes) {\n    var _a;\n\n    if ((_a = this.navigator) === null || _a === void 0 ? void 0 : _a.userAgent) {\n      return /googlebot|bingbot|yandex|baiduspider|facebookexternalhit|twitterbot|rogerbot|linkedinbot|embedly|quora\\ link\\ preview|showyoubot|outbrain|pinterest\\/0\\.|pinterestbot|slackbot|vkShare|W3C_Validator|whatsapp|duckduckbot/i.test(this.navigator.userAgent);\n    }\n\n    return false;\n  }\n\n}\n\nclass IntersectionObserverHooks extends SharedHooks {\n  constructor() {\n    super(...arguments);\n    this.observers = new WeakMap();\n    this.intersectionSubject = new Subject();\n    this.uniqKey = {};\n  }\n\n  getObservable(attributes) {\n    if (this.skipLazyLoading(attributes)) {\n      return of({\n        isIntersecting: true\n      });\n    }\n\n    if (attributes.customObservable) {\n      return attributes.customObservable;\n    }\n\n    const scrollContainerKey = attributes.scrollContainer || this.uniqKey;\n    const options = {\n      root: attributes.scrollContainer || null\n    };\n\n    if (attributes.offset) {\n      options.rootMargin = `${attributes.offset}px`;\n    }\n\n    let observer = this.observers.get(scrollContainerKey);\n\n    if (!observer) {\n      observer = new IntersectionObserver(entrys => this.loadingCallback(entrys), options);\n      this.observers.set(scrollContainerKey, observer);\n    }\n\n    observer.observe(attributes.element);\n    return Observable.create(obs => {\n      const subscription = this.intersectionSubject.pipe(filter(entry => entry.target === attributes.element)).subscribe(obs);\n      return () => {\n        subscription.unsubscribe();\n        observer.unobserve(attributes.element);\n      };\n    });\n  }\n\n  isVisible(event) {\n    return event.isIntersecting;\n  }\n\n  loadingCallback(entrys) {\n    entrys.forEach(entry => this.intersectionSubject.next(entry));\n  }\n\n}\n\nfunction lazyLoadImage(hooks, attributes) {\n  return evntObservable => {\n    return evntObservable.pipe(tap(data => attributes.onStateChange.emit({\n      reason: 'observer-emit',\n      data\n    })), filter(event => hooks.isVisible(event, attributes)), take(1), tap(() => attributes.onStateChange.emit({\n      reason: 'start-loading'\n    })), mergeMap(() => hooks.loadImage(attributes)), tap(() => attributes.onStateChange.emit({\n      reason: 'mount-image'\n    })), tap(imagePath => hooks.setLoadedImage(imagePath, attributes)), tap(() => attributes.onStateChange.emit({\n      reason: 'loading-succeeded'\n    })), map(() => true), catchError(error => {\n      attributes.onStateChange.emit({\n        reason: 'loading-failed',\n        data: error\n      });\n      hooks.setErrorImage(error, attributes);\n      return of(false);\n    }), tap(() => {\n      attributes.onStateChange.emit({\n        reason: 'finally'\n      });\n      hooks.finally(attributes);\n    }));\n  };\n}\n\nconst LAZYLOAD_IMAGE_HOOKS = new InjectionToken('LazyLoadImageHooks');\nlet LazyLoadImageDirective = /*#__PURE__*/(() => {\n  class LazyLoadImageDirective {\n    constructor(el, ngZone, platformId, hooks) {\n      this.onStateChange = new EventEmitter(); // Emits an event on every state change\n\n      this.elementRef = el;\n      this.ngZone = ngZone;\n      this.propertyChanges$ = new ReplaySubject();\n      this.hooks = hooks;\n      this.hooks.setPlatformId(platformId);\n      this.uid = Math.random().toString(36).substr(2, 9);\n    }\n\n    ngOnChanges() {\n      if (this.debug === true && !this.debugSubscription) {\n        this.debugSubscription = this.onStateChange.subscribe(e => console.log(e));\n      }\n\n      this.propertyChanges$.next({\n        element: this.elementRef.nativeElement,\n        imagePath: this.lazyImage,\n        defaultImagePath: this.defaultImage,\n        errorImagePath: this.errorImage,\n        useSrcset: this.useSrcset,\n        offset: this.offset ? this.offset | 0 : 0,\n        scrollContainer: this.scrollTarget,\n        customObservable: this.customObservable,\n        decode: this.decode,\n        onStateChange: this.onStateChange,\n        id: this.uid\n      });\n    }\n\n    ngAfterContentInit() {\n      if (this.hooks.isDisabled()) {\n        return null;\n      }\n\n      this.ngZone.runOutsideAngular(() => {\n        this.loadSubscription = this.propertyChanges$.pipe(tap(attributes => this.hooks.onAttributeChange(attributes)), tap(attributes => attributes.onStateChange.emit({\n          reason: 'setup'\n        })), tap(attributes => this.hooks.setup(attributes)), switchMap(attributes => {\n          if (!attributes.imagePath) {\n            return never();\n          }\n\n          return this.hooks.getObservable(attributes).pipe(lazyLoadImage(this.hooks, attributes));\n        })).subscribe({\n          next: () => null\n        });\n      });\n    }\n\n    ngOnDestroy() {\n      var _a, _b;\n\n      this.propertyChanges$.pipe(take(1)).subscribe({\n        next: attributes => this.hooks.onDestroy(attributes)\n      }).unsubscribe();\n      (_a = this.loadSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n      (_b = this.debugSubscription) === null || _b === void 0 ? void 0 : _b.unsubscribe();\n    }\n\n  }\n\n  LazyLoadImageDirective.ɵfac = function LazyLoadImageDirective_Factory(t) {\n    return new (t || LazyLoadImageDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(PLATFORM_ID), i0.ɵɵdirectiveInject(LAZYLOAD_IMAGE_HOOKS));\n  };\n\n  LazyLoadImageDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: LazyLoadImageDirective,\n    selectors: [[\"\", \"lazyLoad\", \"\"]],\n    inputs: {\n      lazyImage: [\"lazyLoad\", \"lazyImage\"],\n      defaultImage: \"defaultImage\",\n      errorImage: \"errorImage\",\n      scrollTarget: \"scrollTarget\",\n      customObservable: \"customObservable\",\n      offset: \"offset\",\n      useSrcset: \"useSrcset\",\n      decode: \"decode\",\n      debug: \"debug\"\n    },\n    outputs: {\n      onStateChange: \"onStateChange\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return LazyLoadImageDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet LazyLoadImageModule = /*#__PURE__*/(() => {\n  class LazyLoadImageModule {}\n\n  LazyLoadImageModule.ɵfac = function LazyLoadImageModule_Factory(t) {\n    return new (t || LazyLoadImageModule)();\n  };\n\n  LazyLoadImageModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: LazyLoadImageModule\n  });\n  LazyLoadImageModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [{\n      provide: LAZYLOAD_IMAGE_HOOKS,\n      useClass: IntersectionObserverHooks\n    }]\n  });\n  return LazyLoadImageModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nclass Rect {\n  constructor(left, top, right, bottom) {\n    this.left = left;\n    this.top = top;\n    this.right = right;\n    this.bottom = bottom;\n  }\n\n  static fromElement(element) {\n    const {\n      left,\n      top,\n      right,\n      bottom\n    } = element.getBoundingClientRect();\n\n    if (left === 0 && top === 0 && right === 0 && bottom === 0) {\n      return Rect.empty;\n    } else {\n      return new Rect(left, top, right, bottom);\n    }\n  }\n\n  static fromWindow(_window) {\n    return new Rect(0, 0, _window.innerWidth, _window.innerHeight);\n  }\n\n  inflate(inflateBy) {\n    this.left -= inflateBy;\n    this.top -= inflateBy;\n    this.right += inflateBy;\n    this.bottom += inflateBy;\n  }\n\n  intersectsWith(rect) {\n    return rect.left < this.right && this.left < rect.right && rect.top < this.bottom && this.top < rect.bottom;\n  }\n\n  getIntersectionWith(rect) {\n    const left = Math.max(this.left, rect.left);\n    const top = Math.max(this.top, rect.top);\n    const right = Math.min(this.right, rect.right);\n    const bottom = Math.min(this.bottom, rect.bottom);\n\n    if (right >= left && bottom >= top) {\n      return new Rect(left, top, right, bottom);\n    } else {\n      return Rect.empty;\n    }\n  }\n\n}\n\nRect.empty = new Rect(0, 0, 0, 0);\n\nclass ScrollHooks extends SharedHooks {\n  constructor() {\n    super(...arguments);\n\n    this.getWindow = () => window;\n\n    this.scrollListeners = new WeakMap(); // Only create one scroll listener per target and share the observable.\n    // Typical, there will only be one observable per application\n\n    this.getScrollListener = scrollTarget => {\n      if (!scrollTarget || typeof scrollTarget.addEventListener !== 'function') {\n        console.warn('`addEventListener` on ' + scrollTarget + ' (scrollTarget) is not a function. Skipping this target');\n        return empty();\n      }\n\n      const scrollListener = this.scrollListeners.get(scrollTarget);\n\n      if (scrollListener) {\n        return scrollListener;\n      }\n\n      const srollEvent = Observable.create(observer => {\n        const eventName = 'scroll';\n\n        const handler = event => observer.next(event);\n\n        const options = {\n          passive: true,\n          capture: false\n        };\n        scrollTarget.addEventListener(eventName, handler, options);\n        return () => scrollTarget.removeEventListener(eventName, handler, options);\n      });\n      const listener = this.sampleObservable(srollEvent);\n      this.scrollListeners.set(scrollTarget, listener);\n      return listener;\n    };\n  }\n\n  getObservable(attributes) {\n    if (this.skipLazyLoading(attributes)) {\n      return of('load');\n    } else if (attributes.customObservable) {\n      return attributes.customObservable.pipe(startWith(''));\n    } else if (attributes.scrollContainer) {\n      return this.getScrollListener(attributes.scrollContainer);\n    }\n\n    return this.getScrollListener(this.getWindow());\n  }\n\n  isVisible(event, attributes) {\n    const elementBounds = Rect.fromElement(attributes.element);\n\n    if (elementBounds === Rect.empty) {\n      return false;\n    }\n\n    const windowBounds = Rect.fromWindow(this.getWindow());\n    elementBounds.inflate(attributes.offset);\n\n    if (attributes.scrollContainer) {\n      const scrollContainerBounds = Rect.fromElement(attributes.scrollContainer);\n      const intersection = scrollContainerBounds.getIntersectionWith(windowBounds);\n      return elementBounds.intersectsWith(intersection);\n    } else {\n      return elementBounds.intersectsWith(windowBounds);\n    }\n  }\n\n  sampleObservable(obs, scheduler) {\n    return obs.pipe(sampleTime(100, scheduler), share(), startWith(''));\n  }\n\n}\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Hooks, IntersectionObserverHooks, LAZYLOAD_IMAGE_HOOKS, LazyLoadImageDirective, LazyLoadImageModule, ScrollHooks, SharedHooks }; //# sourceMappingURL=ng-lazyload-image.mjs.map","map":null,"metadata":{},"sourceType":"module"}